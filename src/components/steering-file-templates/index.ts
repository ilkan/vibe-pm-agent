/**
 * SteeringFileTemplates Component
 * 
 * Provides predefined templates for different types of steering files
 * with proper placeholder management and validation.
 */

import { DocumentType, SteeringFileTemplate } from '../../models/steering';

/**
 * Template registry for different document types
 */
export class SteeringFileTemplates {
  private templates: Map<DocumentType, SteeringFileTemplate>;

  constructor() {
    this.templates = new Map();
    this.initializeTemplates();
  }

  /**
   * Get template for specific document type
   */
  getTemplate(documentType: DocumentType): SteeringFileTemplate | undefined {
    return this.templates.get(documentType);
  }

  /**
   * Get all available templates
   */
  getAllTemplates(): Map<DocumentType, SteeringFileTemplate> {
    return new Map(this.templates);
  }

  /**
   * Register or update a template
   */
  registerTemplate(template: SteeringFileTemplate): void {
    this.templates.set(template.documentType, template);
  }

  /**
   * Check if template exists for document type
   */
  hasTemplate(documentType: DocumentType): boolean {
    return this.templates.has(documentType);
  }

  /**
   * Initialize all predefined templates
   */
  private initializeTemplates(): void {
    // Requirements template
    this.templates.set(DocumentType.REQUIREMENTS, {
      documentType: DocumentType.REQUIREMENTS,
      defaultInclusionRule: 'fileMatch',
      defaultFileMatchPattern: 'requirements*|spec*|*requirements*',
      template: `# Requirements Guidance: {feature_name}

This guidance was generated by the PM Agent Intent-to-Spec Optimizer and contains consulting-grade requirements analysis.

## Business Context

{business_context}

## Key Requirements

{key_requirements}

## Consulting Methodology Insights

{consulting_insights}

## Implementation Considerations

When working on this feature, consider the following:

- Ensure all acceptance criteria are testable and measurable
- Validate requirements against business objectives before implementation
- Use the MoSCoW prioritization to guide development phases
- Maintain traceability between requirements and implementation tasks

## Related Documents

{related_documents}

## Quality Gates

Before proceeding with implementation:
- [ ] All requirements have clear acceptance criteria
- [ ] Business stakeholders have approved the requirements
- [ ] Technical feasibility has been validated
- [ ] Dependencies have been identified and documented

---
*Generated by PM Agent Intent-to-Spec Optimizer on {timestamp}*
*Feature: {feature_name} | Document Type: Requirements Analysis*`,
      requiredPlaceholders: [
        'feature_name', 
        'timestamp', 
        'business_context', 
        'key_requirements', 
        'consulting_insights', 
        'related_documents'
      ],
      validateContent: (content: string) => {
        return content.includes('Requirements') && content.length > 100;
      }
    });

    // Design template
    this.templates.set(DocumentType.DESIGN, {
      documentType: DocumentType.DESIGN,
      defaultInclusionRule: 'fileMatch',
      defaultFileMatchPattern: 'design*|architecture*|*design*|*arch*',
      template: `# Design Guidance: {feature_name}

This guidance contains Impact vs Effort analysis and design options from PM Agent consulting analysis.

## Design Philosophy

{design_philosophy}

## Design Options Analysis

{design_options}

## Impact vs Effort Matrix

{impact_effort_matrix}

## Architecture Guidance

{architecture_guidance}

## Technical Considerations

When implementing this design:

- Follow the recommended design patterns for consistency
- Consider scalability and maintainability in architectural decisions
- Validate design choices against non-functional requirements
- Document architectural decisions and their rationales

## Risk Assessment

{risk_assessment}

## Related Documents

{related_documents}

## Design Review Checklist

Before implementation:
- [ ] Design aligns with business requirements
- [ ] Architecture supports scalability needs
- [ ] Security considerations have been addressed
- [ ] Performance implications have been evaluated
- [ ] Integration points have been defined

---
*Generated by PM Agent Intent-to-Spec Optimizer on {timestamp}*
*Feature: {feature_name} | Document Type: Design Analysis*`,
      requiredPlaceholders: [
        'feature_name',
        'timestamp',
        'design_philosophy',
        'design_options',
        'impact_effort_matrix',
        'architecture_guidance',
        'risk_assessment',
        'related_documents'
      ],
      validateContent: (content: string) => {
        return content.includes('Design') && content.length > 100;
      }
    });

    // Management One-Pager template
    this.templates.set(DocumentType.ONEPAGER, {
      documentType: DocumentType.ONEPAGER,
      defaultInclusionRule: 'manual',
      template: `# Executive Guidance: {feature_name}

This executive-level guidance follows the Pyramid Principle and provides ROI analysis for stakeholder communication.

## Executive Summary

{executive_summary}

## Strategic Recommendation

{strategic_recommendation}

## ROI Analysis

{roi_analysis}

## Pyramid Principle Structure

{pyramid_principle}

## Key Success Metrics

{success_metrics}

## Stakeholder Communication Points

When presenting this feature to stakeholders:

- Lead with the business impact and ROI
- Use the pyramid principle to structure arguments
- Provide clear success metrics and timelines
- Address potential concerns proactively

## Decision Framework

{decision_framework}

## Related Documents

{related_documents}

## Executive Checklist

For leadership review:
- [ ] Business case is compelling and data-driven
- [ ] ROI projections are realistic and validated
- [ ] Success metrics are clearly defined
- [ ] Resource requirements are understood
- [ ] Risk mitigation strategies are in place

---
*Generated by PM Agent Intent-to-Spec Optimizer on {timestamp}*
*Feature: {feature_name} | Document Type: Executive One-Pager*`,
      requiredPlaceholders: [
        'feature_name',
        'timestamp',
        'executive_summary',
        'strategic_recommendation',
        'roi_analysis',
        'pyramid_principle',
        'success_metrics',
        'decision_framework',
        'related_documents'
      ],
      validateContent: (content: string) => {
        return content.includes('Executive') && content.includes('ROI');
      }
    });

    // PR-FAQ template
    this.templates.set(DocumentType.PRFAQ, {
      documentType: DocumentType.PRFAQ,
      defaultInclusionRule: 'manual',
      template: `# Product Clarity Guidance: {feature_name}

This guidance provides Amazon-style Press Release and FAQ for product clarity and communication.

## Press Release Summary

{press_release}

## Product Vision

{product_vision}

## Frequently Asked Questions

{faq_section}

## Product Clarity Insights

{product_clarity}

## Customer Communication Strategy

{communication_strategy}

## Product Positioning

When communicating about this feature:

- Focus on customer benefits rather than technical features
- Use clear, jargon-free language for broader audiences
- Anticipate and address common customer questions
- Align messaging with overall product strategy

## Market Context

{market_context}

## Related Documents

{related_documents}

## Product Launch Checklist

For product readiness:
- [ ] Customer value proposition is clear
- [ ] Messaging is consistent across channels
- [ ] FAQ addresses common concerns
- [ ] Launch timeline is realistic
- [ ] Success metrics are defined

---
*Generated by PM Agent Intent-to-Spec Optimizer on {timestamp}*
*Feature: {feature_name} | Document Type: PR-FAQ Analysis*`,
      requiredPlaceholders: [
        'feature_name',
        'timestamp',
        'press_release',
        'product_vision',
        'faq_section',
        'product_clarity',
        'communication_strategy',
        'market_context',
        'related_documents'
      ],
      validateContent: (content: string) => {
        return content.includes('Press Release') && content.includes('FAQ');
      }
    });

    // Tasks template
    this.templates.set(DocumentType.TASKS, {
      documentType: DocumentType.TASKS,
      defaultInclusionRule: 'fileMatch',
      defaultFileMatchPattern: 'tasks*|todo*|*tasks*|implementation*|plan*',
      template: `# Implementation Guidance: {feature_name}

This guidance contains phased implementation plan and best practices from PM Agent analysis.

## Implementation Strategy

{implementation_strategy}

## Task Breakdown Structure

{task_breakdown}

## Development Best Practices

{best_practices}

## Quality Assurance Guidelines

{qa_guidelines}

## Implementation Phases

{implementation_phases}

## Development Workflow

When implementing these tasks:

- Follow test-driven development practices
- Implement incrementally with regular validation
- Maintain clear documentation throughout
- Conduct code reviews for all changes
- Validate against requirements at each milestone

## Risk Mitigation

{risk_mitigation}

## Related Documents

{related_documents}

## Implementation Checklist

For each development phase:
- [ ] Tasks are clearly defined and estimated
- [ ] Dependencies are identified and managed
- [ ] Test cases are written before implementation
- [ ] Code quality standards are maintained
- [ ] Progress is tracked and communicated

## Success Criteria

{success_criteria}

---
*Generated by PM Agent Intent-to-Spec Optimizer on {timestamp}*
*Feature: {feature_name} | Document Type: Implementation Plan*`,
      requiredPlaceholders: [
        'feature_name',
        'timestamp',
        'implementation_strategy',
        'task_breakdown',
        'best_practices',
        'qa_guidelines',
        'implementation_phases',
        'risk_mitigation',
        'related_documents',
        'success_criteria'
      ],
      validateContent: (content: string) => {
        return content.includes('Implementation') && content.includes('Task');
      }
    });
  }

  /**
   * Validate template structure and placeholders
   */
  validateTemplate(template: SteeringFileTemplate): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Check required fields
    if (!template.documentType) {
      errors.push('Template must have a documentType');
    }

    if (!template.defaultInclusionRule) {
      errors.push('Template must have a defaultInclusionRule');
    }

    if (!template.template) {
      errors.push('Template must have a template string');
    }

    if (!template.requiredPlaceholders || template.requiredPlaceholders.length === 0) {
      errors.push('Template must have requiredPlaceholders array');
    }

    // Validate placeholders exist in template
    if (template.template && template.requiredPlaceholders) {
      for (const placeholder of template.requiredPlaceholders) {
        const placeholderPattern = `{${placeholder}}`;
        if (!template.template.includes(placeholderPattern)) {
          errors.push(`Required placeholder {${placeholder}} not found in template`);
        }
      }
    }

    // Validate fileMatchPattern for fileMatch inclusion
    if (template.defaultInclusionRule === 'fileMatch' && !template.defaultFileMatchPattern) {
      errors.push('Template with fileMatch inclusion must have defaultFileMatchPattern');
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }

  /**
   * Get template statistics
   */
  getTemplateStats(): {
    totalTemplates: number;
    templatesByType: Record<DocumentType, boolean>;
    averagePlaceholders: number;
  } {
    const templatesByType = {} as Record<DocumentType, boolean>;
    let totalPlaceholders = 0;

    for (const [type, template] of this.templates) {
      templatesByType[type] = true;
      totalPlaceholders += template.requiredPlaceholders.length;
    }

    return {
      totalTemplates: this.templates.size,
      templatesByType,
      averagePlaceholders: this.templates.size > 0 ? totalPlaceholders / this.templates.size : 0
    };
  }
}

export default SteeringFileTemplates;