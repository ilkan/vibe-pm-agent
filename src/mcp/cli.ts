#!/usr/bin/env node

/**
 * Generated-by: Kiro Spec Mode
 * Spec-ID: vibe_pm_agent_v2_hackathon
 * Spec-Hash: sha256:a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
 * Model: claude-3.5-sonnet
 * Timestamp: 2025-01-09T10:30:00Z
 */

import { PMAgentMCPServer } from './server';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';

/**
 * MCP Server CLI entry point with health check capabilities
 */
async function main() {
  const args = process.argv.slice(2);
  
  // Handle health check command
  if (args.includes('--health') || args.includes('-h')) {
    const server = new PMAgentMCPServer({
      enableLogging: false,
      enableMetrics: true
    });
    
    try {
      const health = await server.healthCheck();
      console.log(JSON.stringify(health, null, 2));
      process.exit(0);
    } catch (error) {
      console.error('Health check failed:', error);
      process.exit(1);
    }
  }
  
  // Handle version command
  if (args.includes('--version') || args.includes('-v')) {
    console.log('vibe-pm-agent MCP Server v2.0.0');
    console.log('Generated by: Kiro Spec Mode');
    console.log('Spec ID: vibe_pm_agent_v2_hackathon');
    process.exit(0);
  }
  
  // Handle help command
  if (args.includes('--help')) {
    console.log(`
vibe-pm-agent MCP Server

Usage:
  npm start                 Start the MCP server
  npm start -- --health     Check server health status
  npm start -- --version    Show version information
  npm start -- --help       Show this help message

MCP Tools Available:
  - generate_requirements: Create PM-grade requirements with MoSCoW prioritization
  - generate_design_options: Generate Conservative/Balanced/Bold design alternatives  
  - generate_task_plan: Create phased implementation plan with guardrails
  - generate_management_onepager: Executive one-pager with Pyramid Principle
  - generate_pr_faq: Amazon-style PR-FAQ with press release and FAQ
  
  Plus 13 additional business intelligence and optimization tools.

For more information, visit: https://github.com/your-org/vibe-pm-agent
`);
    process.exit(0);
  }
  
  // Start the MCP server
  console.error('Starting vibe-pm-agent MCP Server...');
  
  const server = new PMAgentMCPServer({
    enableLogging: true,
    enableMetrics: true
  });
  
  // Create transport and connect
  const transport = new StdioServerTransport();
  
  // Handle graceful shutdown
  process.on('SIGINT', async () => {
    console.error('Received SIGINT, shutting down gracefully...');
    try {
      await server.stop();
      process.exit(0);
    } catch (error) {
      console.error('Error during shutdown:', error);
      process.exit(1);
    }
  });
  
  process.on('SIGTERM', async () => {
    console.error('Received SIGTERM, shutting down gracefully...');
    try {
      await server.stop();
      process.exit(0);
    } catch (error) {
      console.error('Error during shutdown:', error);
      process.exit(1);
    }
  });
  
  try {
    // Connect and run the server
    await server.connect(transport);
    console.error('MCP Server started successfully');
    
    // Log health status
    const health = await server.healthCheck();
    console.error(`Server Status: ${health.status}`);
    console.error(`Tools Available: ${health.toolsAvailable.length}`);
    console.error('Clean tools: generate_requirements, generate_design_options, generate_task_plan, generate_management_onepager, generate_pr_faq');
    
  } catch (error) {
    console.error('Failed to start MCP server:', error);
    process.exit(1);
  }
}

// Run the CLI
if (require.main === module) {
  main().catch((error) => {
    console.error('Unhandled error:', error);
    process.exit(1);
  });
}

export { main };